mod <- llvm_load_module "mwe.bc";
import "mwe.cry";

let ptr_to_fresh n ty = do {
    x <- llvm_fresh_var n ty;
    p <- llvm_alloc ty;
    llvm_points_to p (llvm_term x);
    return (x, p);
};

let ptr_to_fresh_readonly n ty = do {
    x <- llvm_fresh_var n ty;
    p <- llvm_alloc_readonly ty;
    llvm_points_to p (llvm_term x);
    return (x, p);
};

let i16 = llvm_int 16;


let weird_add_spec = do {
  // Initialise variable(s).
  (f, pf) <- ptr_to_fresh_readonly "f" (llvm_array 1 i16);
  a <- llvm_fresh_var "a" i16;

  // Run function.
  llvm_execute_func [pf, llvm_term a];

  // Result is equivalent to Cryptol function.
  llvm_return (llvm_term {{ weird_add f a }});
};

let pair_weird_add_spec = do {
  // Initialise variable(s).
  pout <- llvm_alloc (llvm_array 2 i16);
  (f, pf) <- ptr_to_fresh_readonly "f" (llvm_array 1 i16);
  (L, pL) <- ptr_to_fresh_readonly "L" (llvm_array 2 i16);

  // Run function.
  llvm_execute_func [pout, pf, pL];

  // Result is equivalent to Cryptol function.
  llvm_points_to pout (llvm_term {{ pair_weird_add f L }});
};

weird_add_ov <- crucible_llvm_verify mod "weird_add" [] false weird_add_spec abc;

// This works.
//pair_weird_add_ov <- crucible_llvm_verify mod "pair_weird_add" [] false pair_weird_add_spec abc;

// This doesn't.
pair_weird_add_ov <- crucible_llvm_verify mod "pair_weird_add" [weird_add_ov] false pair_weird_add_spec abc;