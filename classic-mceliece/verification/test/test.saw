import "test.cry";

let ptr_to_fresh_readonly n ty = do {
    x <- llvm_fresh_var n ty;
    p <- llvm_alloc_readonly ty;
    llvm_points_to p (llvm_term x);
    return (x, p);
};

let array_type = (llvm_array (eval_int {{`SIZE : [lg2 SIZE + 1]}}) (llvm_int 16));
let larger_array_type = (llvm_array (eval_int {{ (`SIZE + `SIZE - 1) : [lg2 (SIZE + SIZE- 1) + 1]}}) (llvm_int 16));

let test_plus_spec = do {
  // Initialise variable(s).
  po <- llvm_alloc array_type;
  (x, px) <- ptr_to_fresh_readonly "in0" array_type;
  (y, py) <- ptr_to_fresh_readonly "in1" array_type;

  // Run function.
  llvm_execute_func [po, px, py];
  
  // Result is equivalent to Cryptol function.
  llvm_points_to po (llvm_term {{ test_plus x y }});
};

let test_mult_spec = do {
  // Initialise variable(s).
  po <- llvm_alloc array_type;
  (x, px) <- ptr_to_fresh_readonly "in0" array_type;
  (y, py) <- ptr_to_fresh_readonly "in1" array_type;

  // Run function.
  llvm_execute_func [po, px, py];
  
  // Result is equivalent to Cryptol function.
  llvm_points_to po (llvm_term {{ test_mult x y }});
};

let test_dual_spec = do {
  // Initialise variable(s).
  po <- llvm_alloc larger_array_type;
  (x, px) <- ptr_to_fresh_readonly "in0" array_type;
  (y, py) <- ptr_to_fresh_readonly "in1" array_type;

  // Run function.
  llvm_execute_func [po, px, py];
  
  // Result is equivalent to Cryptol function.
  llvm_points_to po (llvm_term {{ test_dual x y }});
};

linked_mod <- llvm_load_module "test.bc";

test_plus_ov <- crucible_llvm_verify linked_mod "test_plus" [] false test_plus_spec z3;
test_mult_ov <- crucible_llvm_verify linked_mod "test_mult" [] false test_mult_spec z3;
test_dual_ov <- crucible_llvm_verify linked_mod "test_dual" [] false test_dual_spec z3;