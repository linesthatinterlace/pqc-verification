// mceliece348864

module encrypt where

import helper
import params

same_mask' : [16] -> [16] -> [8]
same_mask' x y = drop <~ -(((zext (x ^ y) : [32]) - 1) >> 31)

same_mask : [16] -> [16] -> [8]
same_mask x y = repeat (x == y)

property same_mask_eq x y = same_mask x y == same_mask' x y

b_func : {n} (fin n, n >=1) => [n] -> [n]
b_func x = zext [foldr (^) False x]

b_func' : [8] -> [8]
b_func' b_0 = b_4
  where b_1 = b_0 ^ (b_0 >> 4)
        b_2 = b_1 ^ (b_1 >> 2)
        b_3 = b_2 ^ (b_2 >> 1)
        b_4 = b_3 && 1

property b_func_eq x = b_func x == b_func' x

identityMatrix : {r, c} [r][c]
identityMatrix @ i @ j = i == j

syndrome : [PK_NROWS_t*PK_ROW_BYTES_t][8] -> [SYS_N_t/8][8] -> [SYND_BYTES_t][8]
syndrome pk e = last ss
  where pk_ptrs = split`{PK_NROWS_t} pk
        ss = [zero] #   [ syndrome_loop e pk_ptr i s  
                        | pk_ptr <- pk_ptrs
                        | i <- [0 .. <PK_NROWS_t] 
                        | s <- ss
                        ]

syndrome_loop : [SYS_N_t/8][8] -> [PK_ROW_BYTES_t][8] -> [16] -> [SYND_BYTES_t][8] -> [SYND_BYTES_t][8]
syndrome_loop e pk_ptr i s_pre = s_post
  where row = zero # pk_ptr : [SYS_N_t/8][8] 
        row' = update row (i/8) ((row @ (i/8)) || (1 << (i%8)))
        b = b_func (foldl' (^) zero (zipWith (&&) row' e))
        s_post = update s_pre (i/8) ((s_pre @ (i/8)) || (b << (i%8)))

syndrome' : [PK_NROWS_t*PK_ROW_BYTES_t][8] 
            -> [SYS_N_t/8][8] 
            -> [SYND_BYTES_t][8]
syndrome' pk e = c0
  where matrixT = [ join (map reverse row) 
                  | row <- split`{PK_NROWS_t} pk
                  ] : [PK_NROWS_t][PK_NCOLS_t]
        matrixI = identityMatrix : [PK_NROWS_t][PK_NROWS_t]
        matrixH = [rowI # rowT 
                  | rowI <- matrixI
                  | rowT <- matrixT
                  ] : [PK_NROWS_t][SYS_N_t]
        e_bits  = join (map reverse e) : [SYS_N_t]
        c0_bits = [ foldr (^) zero  [ r_b && e_b 
                                    | r_b <- row 
                                    | e_b <- e_bits
                                    ]
                  | row <- matrixH 
                  ] : [PK_NROWS_t]
        c0      = map reverse (split c0_bits) : [SYND_BYTES_t][8]



syndrome_eq pk e = syndrome pk e == syndrome' pk e


set_ith_bit : {n, m} (fin n, fin m, lg2 (8*n) < m) => [m] -> [n][8] -> [n][8]
set_ith_bit i xs = update xs  (i >> 3) 
                              (updateEnd  (xs @ (i >> 3)) 
                                          (drop`{m - min 3 m} i) 
                                          1 )

syndrome_loop' : [SYS_N_t/8][8] -> [PK_ROW_BYTES_t][8] -> [16] -> [SYND_BYTES_t][8] -> [SYND_BYTES_t][8]
syndrome_loop' e pk_ptr i s_pre = s_post
  where id : [SYND_BYTES_t][8]
        id @ j = (zero # [j == i/8]) << (i%8)
        row = id # pk_ptr : [SYS_N_t/8][8] 
        b = b_func (foldl' (^) zero [br && be | br <- row | be <- e ])
        s_post =  if b ! 0 then set_ith_bit i s_pre else s_pre

syndrome_loop_eq e pk_ptr i s_pre = (i < PK_NROWS) ==> (syndrome_loop e pk_ptr i s_pre == syndrome_loop' e pk_ptr i s_pre)


blah : [16] -> [PK_ROW_BYTES_t][8] -> Bit
blah i pk =(i < PK_NROWS) ==> (row' == row2)
  where row = zero # pk : [SYS_N_t/8][8] 
        row' = update row (i/8) ((row @ (i/8)) || (1 << (i%8)))
        id : [SYND_BYTES_t][8]
        id @ j = (zero # [j == i/8]) << (i%8)
        row2 = id # pk : [SYS_N_t/8][8] 