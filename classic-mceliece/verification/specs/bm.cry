// mceliece348864

module bm where

import helper
import params
import gf
import root

bm : [2*SYS_T_t]gf_t -> [SYS_T_t + 1]gf_t
bm s = reverse (data_final.C)
  where (B_init : [SYS_T_t + 1]gf_t) = [zero, 1] # zero
        (C_init : [SYS_T_t + 1]gf_t) = [1] # zero
        (b_init : gf_t) = 1
        (L_init : [16]) = 0
        data_init = {B = B_init, C = C_init, b = b_init, L = L_init}
        datas = [data_init] # [ loop_N s N data' | data' <- datas | N <- [0 .. <2*SYS_T_t] ]
        data_final = last datas

loop_N : [2*SYS_T_t]gf_t -> [width (2*SYS_T_t - 1)] -> {B: [SYS_T_t + 1]gf_t, C: [SYS_T_t + 1]gf_t, b : gf_t, L : [16]} -> {B: [SYS_T_t + 1]gf_t, C: [SYS_T_t + 1]gf_t, b : gf_t, L : [16]}
loop_N s N data = modif N d (gf_frac data.b d) data
  where d = bm_calc s (data.C) N

bm_calc : [2*SYS_T_t]gf_t -> [SYS_T_t + 1]gf_t -> [width (2*SYS_T_t - 1)] -> gf_t
bm_calc s C N = last ds
  where ds = [zero] # [ if i <= (min N SYS_T)
                        then d' ^ (gf_mul ( C@i ) ( s@(N - i) ) )
                        else d'
                      | d' <- ds
                      | i <- [0 .. SYS_T_t]
                      ]


modif : [width (2*SYS_T_t - 1)] -> gf_t -> gf_t -> {B: [SYS_T_t + 1]gf_t, C: [SYS_T_t + 1]gf_t, b : gf_t, L : [16]} -> {B: [SYS_T_t + 1]gf_t, C: [SYS_T_t + 1]gf_t, b : gf_t, L : [16]}
modif N d f data =  {B = B_final, C = C_final, b = b_final, L = L_final}
  where N' = zext N
        mne = ((d - 1) >> 15) - 1
        mle = (((N' - 2*data.L) >> 15) - 1) && mne
        C_final = [gf_add Ci ((gf_mul f Bi) && mne) | Ci <- data.C | Bi <- data.B]
        L_final = (data.L && ~mle) || ((N'+ 1 - data.L) && mle)
        b_final = (data.b && ~mle) || (d && mle)
        B_final = [ (mB && ~mle) || (mC && mle) | mB <- data.B | mC <- data.C ] >> 1

bm_paper : [2*SYS_T_t]gf_t -> [SYS_T_t + 1]gf_t
bm_paper s = reverse (data_final.C)
  where (B_init : [SYS_T_t + 1]gf_t) = [0, 1] # zero
        (C_init : [SYS_T_t + 1]gf_t) = [1] # zero
        (b_init : gf_t) = 1
        (L_init : [16]) = 0
        data_init = {B = B_init, C = C_init, b = b_init, L = L_init}
        datas = [data_init] # [ loop_N_paper s N data' | data' <- datas | N <- [0 .. <2*SYS_T_t] ]
        data_final = last datas

loop_N_paper : [2*SYS_T_t]gf_t -> [width (2*SYS_T_t - 1)] -> {B: [SYS_T_t + 1]gf_t, C: [SYS_T_t + 1]gf_t, b : gf_t, L : [16]} -> {B: [SYS_T_t + 1]gf_t, C: [SYS_T_t + 1]gf_t, b : gf_t, L : [16]}
loop_N_paper s N data = modif_paper N d (gf_frac data.b d) data
  where d = bm_calc_paper s (data.C) N
                                        
bm_calc_paper : [2*SYS_T_t]gf_t -> [SYS_T_t + 1]gf_t -> [width (2*SYS_T_t - 1)] -> gf_t
bm_calc_paper s C N = foldr (gf_add) zero [ gf_mul Ci Si | Ci <- C | Si <- reverse s' ]
  where s' = s <<< (N + 1)

modif_paper : [width (2*SYS_T_t - 1)] -> gf_t -> gf_t -> {B: [SYS_T_t + 1]gf_t, C: [SYS_T_t + 1]gf_t, b : gf_t, L : [16]} -> {B: [SYS_T_t + 1]gf_t, C: [SYS_T_t + 1]gf_t, b : gf_t, L : [16]}
modif_paper N d f data =  {B = B_final, C = C_final, b = b_final, L = L_final}
  where N' = zext N
        C' = [ gf_add Ci (gf_mul f Bi) | Ci <- data.C | Bi <- data.B ]
        (B_final, C_final, b_final, L_final) =
          if d == 0 then
            (data.B >> 1, data.C, data.b, data.L)
          else if 2*data.L > N' then
            (data.B >> 1, C', data.b, data.L)
          else
            (data.C >> 1, C', d, N' + 1 - data.L)

zero_from : {m, a, b} (Logic a, Eq a, fin m, Integral b,  Literal 1 b, Cmp b) => b -> [m]a -> Bit
zero_from N xs = zipWith (&&) (take <~ finite_support N) xs == zero
  where finite_support n = if n <= 0 then repeat (~zero) else [zero] # finite_support (n - 1)

property calc_eq s C N = (zero_from N C) ==> bm_calc s C N == bm_calc_paper s C N

//property calc_eq_core s C = (and <~ map (calc_eq s C) [0 .. 127]) /\ (and <~ map (calc_eq s C) [128 .. 65535])

property calc_eq_excess s C = all (calc_eq s C) [0 .. 127]

property loop_eq s N data = (zero_from N data.C) /\ (all gf_valid s)  /\ (data.L < 0x4001) ==> loop_N_paper s N data == loop_N s N data

// Proven using Yices.
property modif_eq N d f data = (d < 0x8001) /\ (data.L < 0x4001) ==> (modif N d f data) == (modif_paper N d f data)

bm_works : ([2*SYS_T_t]gf_t -> [SYS_T_t + 1]gf_t) -> [2*SYS_T_t]gf_t -> Bit
property bm_works bm_candidate s = syndromes == zero
  where syndromes =  [bm_calc_paper s (reverse C) N | N <- [SYS_T_t .. <2*SYS_T_t]] 
        C = (bm_candidate s)


/*

bm_orig : [2*SYS_T_t]gf_t -> [SYS_T_t + 1]gf_t 
bm_orig s = reverse (data_final.C)
  where (B_init : [SYS_T_t + 1]gf_t) = [0, 1] # zero
        (C_init : [SYS_T_t + 1]gf_t) = [1] # zero
        (b_init : gf_t) = 1
        (L_init : [16]) = 0
        data_init = {B = B_init, C = C_init, b = b_init, L = L_init}
        datas = [data_init] # [ loop_N_orig s N data' | data' <- datas | N <- [0 .. <2*SYS_T_t] ]
        data_final = last datas

loop_N_orig : [2*SYS_T_t]gf_t -> [16] -> {B: [SYS_T_t + 1]gf_t, C: [SYS_T_t + 1]gf_t, b : gf_t, L : [16]} -> {B: [SYS_T_t + 1]gf_t, C: [SYS_T_t + 1]gf_t, b : gf_t, L : [16]}
loop_N_orig s N data = {B = B_final, C = C_final, b = b_final, L = L_final}
  where d_init = 0
        loop_i1 i d' = if i <= (min N SYS_T) then d' ^ (gf_mul ( (data.C)@i ) ( s@(N - i) ) ) else d'
        ds = [d_init] # [ loop_i1 i d' | d' <- ds | i <- [0 .. SYS_T_t]]
        d = last ds
        f = gf_frac data.b d
        d_zero = d == 0
        twoL_gt_N = 2*data.L > N
        B_final = if d_zero \/ twoL_gt_N then data.B >> 1 else data.C >> 1
        C_final = if d_zero then data.C else [ gf_add Ci (gf_mul f Bi) | Ci <- data.C | Bi <- data.B ]
        b_final = if d_zero \/ twoL_gt_N then data.b else d
        L_final = if d_zero \/ twoL_gt_N then data.L else N + 1 - data.L
*/